#include "List ADT.h"
//------------------------------------------------
// freelist version
//********************************************** 

template <typename E>
class Link {
public:
	E element;
	Link* next;

	Link(const E& elemval, Link* nextval = NULL);
	Link(Link* nextval = NULL);
	
	void* operator new(int size);
	void operator delete(void* ptr);
private:
	static Link<E>* freelist;
};

template <typename E>
Link<E>* Link<E>::freelist = NULL;


template <typename E>
Link<E>::Link(const E& elemval, Link* nextval) {
	element = elemval;
	next = nextval;
}

template <typename E>
Link<E>::Link(Link * nextval) {
	next = nextval;
}

template <typename E>
void* Link<E>::operator new(int size) {
	if (freelist == NULL)
	return ::new LINK<E>;
	else {
		Link<E>* temp = freelist;
		freelist = freelist->next;
		return temp;
	}
}

template <typename E>
void Link<E>::delete(void* ptr) {
	((Link<E>*)ptr)->next = freelist;
	freelist = (Link<E>*)ptr;
}


//**********************************************************************************
//----------------------------------------------------------------------------------





//-----------------------------------------------------------
//结点类的定义和声明 common version
//***********************************************************
/*
template <typename E>
class Link {
public:
	E element;
	Link* next;

	Link(const E& elemval, Link* nextval = NULL);
	Link(Link* nextval = NULL);
};

template <typename E>
Link<E>::Link(const E& elemval, Link* nextval) {
	element = elemval;
	next = nextval;
}

template <typename E>
Link<E>::Link(Link * nextval) {
	next = nextval;
}
*/
//*****************************************************************
//----------------------------------------------------------------





//---------------------------------------------------------------------
//**********************************************************************
template <typename E>
class LList : public List<E> {
private:
	Link<E>* head;
	Link<E>* tail;
	Link<E>* curr;
	int cnt;

	void init();
	void removeall();

public:
	LList(int size = defaultSize);
		void clear();
	
	void insert(const E& it);
	void append(const E& it);
	
	E remove();
	
	void moveToStart();
	void moveToEnd();
	void moveToPos(int pos);
	
	void prev();
	void next();
	
	int length()const;
	int currPos()const;
	
	const E& getValue() const;
};

//---------------------------------------------------------------------------
//implementation of Link-based List
//***************************************************************************

template <typename E>
void LList<E>::init() {
	curr = tail = head = new Link<E>;
	cnt = 0;
}

template <typename E>
void LList<E>::removeall() {                            //因为数据结构都是建立在堆上的，所以要手动释放，不像Array-based List 
	while(head != NULL) {
		curr = head; 
		head = head->next;
		delete curr;
	}
}

template <typename E>
LList<E>::LList(int size = defalutSize) {
	init();
}

template <typename E>
Llist<E>::~LList() {
	removeall();
}

template <typename E>
void LList<E>::clear() {              
	removeall();
	init();
}

template <typename E>
void LList<E>::insert(cosnt E& it) {
	curr->next = new Link<E>(it, curr->next);
	if (tail == curr)
		tail = curr->next;
	++cnt;
}

template <typename E>
void LList<E>::append(const E& it) {
	tail->next = new Link<E>;
	tail = tail->next;
	++cnt;
}

template <typename E>                          //操作的对象为curr的下一个节点
E LList<E>::remove() {
	assert(curr->next != NULL);
	E it = curr->next->element;
	Link<E>* ltemp = curr->next;
	if (tail == curr->next)                      //reset the tail
		tail = curr; 
	curr->next = curr->next->next;
	delete ltemp;
	--cnt;
	return it;
}

template <typename E>
void LList<E>::moveToStart() {
	curr = head;
}

template <typename E>
void LList<E>::moveToEnd() {
	curr = tail;                              //attention!!此时curr->next == NULL!!!
}

template <typename E>
void LList<E>::moveToPos(int pos) {
	assert ( (pos >= 0) && (pos <= cnt) )       //when pos == cnt, it equates pos == tail; when pos == 0, curr == head;
	curr = head;
	for (int i = 0; i < pos; ++i)
		curr = curr->next;
}
template <typename E>
void LList<E>::next() {
	if(curr != tail)
		curr = curr->next;
}

template <typename E>                         //cost time: θn
void LList<E>::prev() {
	if (curr == head)
		throw "curr is out of range.";
	Link<E>* temp = head;
	while (temp->next != curr)
		temp = temp->next;
	curr = temp;
}

template <typename E>
int LList<E>::length() const {
	return cnt;
}

template <typename E>
int LList<E>::currPos() const {
	Link<E>* temp = head;
	int cout = 0;
	while( temp != curr) {
		temp = temp->next;
		++count;
	}
	return count;
}

template <typename E>
const E& LList<E>::getValue()const {
	assert(curr->next != NULL);
	return curr->next->element;
}

//******************************************************************************************************
//------------------------------------------------------------------------------------------------------
